from aiogram import types, Dispatcher, Router,F
from aiogram.filters import Command
from aiogram import types
from aiogram.types import Message
from keyboards import *
from api_bot import get_recipe_by_id_api,get_random_word_api,get_word_by_id_api
from api_bot import get_recipes_api, add_recipes_api, get_count_recipes_api
from states import RecipeCreateStates
from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import StatesGroup, State
import aiohttp
import json
import logging
router = Router()


# ///////////////////for comand///////////////////


@router.message(Command("start"))
async def start_comand(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=start_menu())





# ////////////////// for inline keybord ///////////////////////

@router.callback_query(F.data == "start")
async def start_handler(callback: types.CallbackQuery):
    await callback.message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=start_menu())
    await callback.answer()




@router.callback_query(F.data == "help")
async def help_handler(callback: types.CallbackQuery):
    text_answer = (
    "üîé **–Ø–∫ –∑–Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏?**\n"
    "–ü–æ—à—É–∫ —Å–º–∞—á–Ω–∏—Ö —Å—Ç—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–Ω–∏–π —É —Ä–æ–∑–¥—ñ–ª—ñ **¬´–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏¬ª**. "
    "–¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±–µ–∑–ª—ñ—á –∫—Ä—É—Ç–∏—Ö —Å—Ç—Ä–∞–≤, –≤—ñ–¥ –¥–æ–º–∞—à–Ω—å–æ—ó –∫–ª–∞—Å–∏–∫–∏ –¥–æ –≤–∏—à—É–∫–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∏—Ö —à–µ–¥–µ–≤—Ä—ñ–≤. "
    "–ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –∑–Ω–∞–π–¥—ñ—Ç—å —â–æ—Å—å –Ω–∞ —Å–≤—ñ–π —Å–º–∞–∫! üçΩÔ∏è\n\n"
    
    "üìù **–•–æ—á–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º —Ä–µ—Ü–µ–ø—Ç–æ–º?**\n"
    "–õ–µ–≥–∫–æ! –£ —Ä–æ–∑–¥—ñ–ª—ñ **¬´–î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π —Ä–µ—Ü–µ–ø—Ç¬ª** –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–ª–∞—Å–Ω—É —Å—Ç—Ä–∞–≤—É. "
    "–ú–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —ó—ó –ø—Ä–æ—Ç—è–≥–æ–º –∫—ñ–ª—å–∫–æ—Ö –¥–Ω—ñ–≤ —ñ, —è–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ, –¥–æ–¥–∞–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É, —â–æ–± —ñ–Ω—à—ñ –º–æ–≥–ª–∏ —ó—ó —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏! üë®‚Äçüç≥üî•\n\n"
    
    "üì© **–ó–∞–ª–∏—à–∏–ª–∏—Å—å –ø–∏—Ç–∞–Ω–Ω—è? –•–æ—á–µ—Ç–µ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏?**\n"
    "–ó–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –≤–∞—à–∏–º —ñ–¥–µ—è–º —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º! –ü–∏—à—ñ—Ç—å –Ω–∞–º –Ω–∞ email **customercareaboutyou@gmail.com**\n –∞–±–æ –≤ Telegram: "
    "(https://t.me/Development_impoving). üöÄ"
    )
    await callback.message.answer(text_answer, reply_markup=button_to_start_menu())
    await callback.answer()

@router.callback_query(F.data == "contacts")
async def contacts_handler(callback: types.CallbackQuery):
    text_answer = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è üìû\n\n"
        "üìß Email: customercareaboutyou@gmail.com\n"
        "üì± Telegram: https://t.me/Development_impoving\n\n"
        "–ó–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º! –ù–∞—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –Ω–∞–¥–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É. üåü"
    )
    await callback.message.answer(text_answer, reply_markup=button_to_start_menu())
    await callback.answer()

@router.callback_query(F.data == "bot_info")
async def bot_info_handler(callback: types.CallbackQuery):
    text_answer = (
    "üçΩÔ∏è **–í—ñ—Ç–∞—î–º–æ —É —Å–≤—ñ—Ç—ñ —Å–º–∞—á–Ω–∏—Ö —ñ–¥–µ–π!**\n\n"
    "–ú–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ü—å–æ–≥–æ –±–æ—Ç–∞, —â–æ–± –∫–æ–∂–µ–Ω –º—ñ–≥ –ª–µ–≥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏ —Ç–∞ –¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º–∏ –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–º–∏ —à–µ–¥–µ–≤—Ä–∞–º–∏. "
    "–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —è–∫ –ø—Ä–æ—Å—Ç—ñ –¥–æ–º–∞—à–Ω—ñ —Å—Ç—Ä–∞–≤–∏, —Ç–∞–∫ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ñ —à–µ–¥–µ–≤—Ä–∏, —â–æ –ø—ñ–¥–∫–æ—Ä—è—Ç—å –≤–∞—à —Å–º–∞–∫! ü•óüç≤\n\n"
    
    "üîé **–®—É–∫–∞–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç–∏** ‚Äì –æ–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –≤—ñ–¥–∫—Ä–∏–≤–∞–π—Ç–µ –¥–ª—è —Å–µ–±–µ –Ω–æ–≤—ñ —Å–º–∞–∫–∏ —Ç–∞ –Ω–∞–¥–∏—Ö–∞–π—Ç–µ—Å—è –≥–∞—Å—Ç—Ä–æ–Ω–æ–º—ñ—á–Ω–∏–º–∏ —ñ–¥–µ—è–º–∏.\n"
    "üìù **–î–æ–¥–∞–≤–∞–π—Ç–µ –≤–ª–∞—Å–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏** ‚Äì –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —É–ª—é–±–ª–µ–Ω–∏–º–∏ —Å—Ç—Ä–∞–≤–∞–º–∏ –∑ —ñ–Ω—à–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ—ó –∫—É–ª—ñ–Ω–∞—Ä–Ω–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏! üë®‚Äçüç≥üî•\n\n"
    
    "–ú–∏ —Å—Ç–∞—Ä–∞–Ω–Ω–æ –ø—Ä–∞—Ü—é–≤–∞–ª–∏, —â–æ–± –±–æ—Ç —Å–ø–æ–¥–æ–±–∞–≤—Å—è –∫–æ–∂–Ω–æ–º—É, —Ö—Ç–æ –ª—é–±–∏—Ç—å —Å–º–∞—á–Ω–æ –≥–æ—Ç—É–≤–∞—Ç–∏ —Ç–∞ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –Ω–∞ –∫—É—Ö–Ω—ñ. "
    "–ì–æ—Ç–æ–≤—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏? üç≥ –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞–π—Ç–µ —Å–≤—ñ—Ç —Å–º–∞—á–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π! üöÄ"
    )
    await callback.message.answer(text_answer, reply_markup=button_to_start_menu())
    await callback.answer()

# @router.callback_query(F.data == "add_recipe")
# async def help_handler(callback: types.CallbackQuery):
#     await callback.message.answer("–¶–µ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç")
#     await callback.answer()


# @router.callback_query(F.data == "get_recipes")
# async def get_recipes_handler(callback: types.CallbackQuery, session :aiohttp.ClientSession):
#     # await callback.message.answer("–¶–µ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏")
#     data = await get_recipes_api(session) 
#     if data:
#         data = json.dumps(data)
#     else:
#         data = "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤"
#     await callback.message.answer(data)
#     await callback.answer()


@router.message(Command("menu"))  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
async def show_menu(message: Message):
    # await message.answer("üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
    #                      "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
    #                      "/help - –î–æ–ø–æ–º–æ–≥–∞\n"
    #                      "/contacts - –ö–æ–Ω—Ç–∞–∫—Ç–∏\n"
    #                      "/info - –ü—Ä–æ –±–æ—Ç–∞")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())



@router.message(Command('help'))
async def help_handler(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "üîπ /start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
        "üîπ /menu - –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é\n"
        "üîπ /contacts - –ö–æ–Ω—Ç–∞–∫—Ç–∏\n"
        "üîπ /info - –ü—Ä–æ –±–æ—Ç–∞\n"
        "üîπ /help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n\n"
        "‚ùì –Ø–∫—â–æ —É –≤–∞—Å —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
    )

    await message.answer(help_text, parse_mode="Markdown")



@router.callback_query(F.data == "add_recipe")
async def add_recipe_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ä–µ—Ü–µ–ø—Ç–∞:")
    await state.set_state(RecipeCreateStates.title)


@router.message(RecipeCreateStates.title)
async def procces_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ä–µ—Ü–µ–ø—Ç—É:")
    await state.set_state(RecipeCreateStates.description)


@router.message(RecipeCreateStates.description)
async def procces_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —ñ –≥—Ä–∞–º–æ–≤–∫–∏(—á–µ—Ä–µ–∑ –∫–æ–º—É):")
    await state.set_state(RecipeCreateStates.ingredients)


@router.message(RecipeCreateStates.ingredients)
async def procces_ingredients(message: types.Message, state: FSMContext):
    ingredients_list = [ingredient.strip() for ingredient in message.text.split(",")]
    await state.update_data(ingredients=ingredients_list)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫—Ä–æ–∫–∏ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –∞–±–æ –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:")
    await state.set_state(RecipeCreateStates.steps)


@router.message(RecipeCreateStates.steps)
async def procces_steps(message: types.Message, state: FSMContext):
    steps_list = [step.strip() for step in message.text.strip(".").split(".")]
    await state.update_data(steps=steps_list)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –¥–æ —è–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞–ª–µ–∂–∏—Ç—å —Å—Ç—Ä–∞–≤–∞(–¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –ø–æ—à—É–∫—É)(–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∫–∞–∑—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º—É):")
    await state.set_state(RecipeCreateStates.categories)


@router.message(RecipeCreateStates.categories)
async def procces_categories(message: types.Message, state: FSMContext):
    categories_list = [category.strip() for category in message.text.split(",")]
    await state.update_data(categories=categories_list)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ –± –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É:")
    await state.set_state(RecipeCreateStates.cooking_time)


@router.message(RecipeCreateStates.cooking_time)
async def procces_cooking_time(message: types.Message, state: FSMContext):
    await state.update_data(cooking_time=message.text)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è :", reply_markup=choice_difficulty_buttons())
    await state.set_state(RecipeCreateStates.difficulty)


@router.callback_query(RecipeCreateStates.difficulty)
async def procces_difficulty(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(difficulty=callback.data)
    await callback.message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é —Ä–µ—Ü–µ–ø—Ç—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫ :")
    await state.set_state(RecipeCreateStates.image)


@router.message(RecipeCreateStates.image)
async def procces_title(message: types.Message, state: FSMContext, bot: Bot,session :aiohttp.ClientSession):
    if message.photo:
        
        await message.answer("–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–æ—Å—å")
        file_id = message.photo[-1].file_id
        image = await bot.get_file(file_id)

        # await message.answer(await bot.get_file(file_id))
        # await message.answer_photo(file_id, caption="–û—Å—å –≤–∞—à–µ —Ñ–æ—Ç–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.")

    else:
        await message.answer("–§–æ—Ç–æ –Ω–µ –¥–æ–¥–∞–ª–æ—Å—å")
        file_id = None
        image = None
    
    await state.update_data(image_id_in_telegram=file_id)
    await state.update_data(image_file=image)

    state_data = await state.get_data()
    title =  state_data.get("title")
    description =  state_data.get("description")
    ingredients =  state_data.get("ingredients")
    steps =  state_data.get("steps")
    categories =  state_data.get("categories")
    cooking_time =  state_data.get("cooking_time")
    difficulty =  state_data.get("difficulty")
    image_id_in_telegram =  state_data.get("image_id_in_telegram")

    image_file =  state_data.get("image_file")
    text_out = (
        "üçΩ *" + title + "*\n"
        + description + "\n\n"
        "üìå *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:* " + ", ".join(categories) + "\n"
        "‚è≥ *–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:* " + cooking_time + " —Ö–≤\n"
        "üî• *–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:* " + difficulty + "\n\n"
        "üõí *–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:*\n" 
        + chr(10).join(["- " + ingredient for ingredient in ingredients]) + "\n\n"
        "üë®‚Äçüç≥ *–ö—Ä–æ–∫–∏ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:*\n"
        + chr(10).join([str(i+1) + ". " + step for i, step in enumerate(steps)]) + "\n"
    )
    
    try:
        await message.answer_photo(
            photo=image_id_in_telegram,
            caption=text_out,
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ. –û—Å—å –≤–∞—à —Ä–µ—Ü–µ–ø—Ç:\n\n" + text_out, 
            parse_mode="Markdown"
        )
        logging.info(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {e}")
    
    user_id = message.from_user.id
   
    rezult = data = {
        "title": title,
        "description": description,
        "ingredients": ingredients,
        "steps": steps,
        "categories": categories,
        "cooking_time": cooking_time,
        "difficulty": difficulty,
        "image_id_in_telegram": image_id_in_telegram,
        "user_id": user_id
    }
    if not image_id_in_telegram:
        rezult["image_id_in_telegram"] = None
    await add_recipes_api(data=rezult,session=session)
    await state.clear()




@router.callback_query(F.data == "get_recipes")
async def get_recipes_handler(callback: types.CallbackQuery, session :aiohttp.ClientSession,page:int = 1):
    
    limit = 7
    page = 1
    response = await get_count_recipes_api(session)
    total_count = response.get('count') if response and isinstance(response, dict) else 0
    total_pages = (total_count + limit - 1) // limit
    recipes = await get_recipes_api(session=session,page=page,limit=limit)
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Ü–µ–ø—Ç:",
        # reply_markup=get_recipe_keyboard(recipes, page, total_pages)
        reply_markup=get_recipe_keyboard(recipes,page,total_pages)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("page_"))
async def paginate_handler(callback: types.CallbackQuery, session :aiohttp.ClientSession,page:int = 1):
    page = int(callback.data.split("_")[1])
    limit = 7
    response = await get_count_recipes_api(session)
    total_count = response.get('count') if response and isinstance(response, dict) else 0
    total_pages = (total_count + limit - 1) // limit
    recipes = await get_recipes_api(session=session,page=page,limit=limit)
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Ü–µ–ø—Ç:",
        # reply_markup=get_recipe_keyboard(recipes, page, total_pages)
        reply_markup=get_recipe_keyboard(recipes,page,total_pages)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("recipe_"))
async def paginate_handler(callback: types.CallbackQuery, session :aiohttp.ClientSession,page:int = 1):
    # logging.info(callback.data)
    recipe_id = str(callback.data.split("_")[1])
    
    recipe = await get_recipe_by_id_api(session=session, recipe_id=recipe_id)

    text_out = (
        "üçΩ *" + recipe["title"] + "*\n"
        + recipe["description"] + "\n\n"
        "üìå *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:* " + ", ".join(recipe["categories"]) + "\n"
        "‚è≥ *–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:* " + recipe["cooking_time"] + " —Ö–≤\n"
        "üî• *–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:* " + recipe["difficulty"] + "\n\n"
        "üõí *–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:*\n" 
        + chr(10).join(["- " + ingredient for ingredient in recipe["ingredients"]]) + "\n\n"
        "üë®‚Äçüç≥ *–ö—Ä–æ–∫–∏ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:*\n"
        + chr(10).join([str(i+1) + ". " + step for i, step in enumerate(recipe["steps"])]) + "\n"
    )
    
    try:
        if len(text_out)< 1024:
            await callback.message.answer_photo(
                photo=recipe["image_id_in_telegram"],
                caption=text_out,
                parse_mode="Markdown"
            )
        # --------------------------------
        else:
            await callback.message.answer_photo(photo=recipe["image_id_in_telegram"])

            # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –¥–æ—Å–∏—Ç—å –¥–æ–≤–≥–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            await callback.message.answer(text_out, parse_mode="Markdown")
# ----------------------------------------,

        

        
    except Exception as e:
        await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ. –û—Å—å –≤–∞—à —Ä–µ—Ü–µ–ø—Ç:\n\n" + text_out, 
            parse_mode="Markdown"
        )
        logging.info(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {e}")
    
    await callback.answer()
    
# ////////////////////////////////// english
@router.callback_query(F.data == "get_english")
async def get_recipes_handler(callback: types.CallbackQuery):
    await callback.message.answer("–û–±–µ—Ä–∏ –¥—ñ—é", reply_markup=english_menu())    
    await callback.answer()

@router.callback_query(F.data.startswith("get_word_in_"))
async def get_rundom_word_handler(callback: types.CallbackQuery, session :aiohttp.ClientSession):
    data_split = (callback.data.split("_"))

    lang = data_split[3]
    
    if len(data_split) >= 5:
        flag_show_means = True
    else:
        flag_show_means = False


    if len(data_split) == 6:
        vacab_id = data_split[5]
        word = await get_word_by_id_api(session,vacab_id)
    
    else:
        word = await get_random_word_api(session)

    
    # await callback.message.edit_text("–û–±–µ—Ä–∏ –¥—ñ—é", reply_markup=get_word_menu_keyboard(word=word,lang=lang,flag_show_means=flag_show_means))    
    keybord,text = get_word_menu_keyboard(word=word,lang=lang,flag_show_means=flag_show_means)
    if not text:
        text = "–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å"
    # await callback.message.answer(f" {text}", reply_markup=keybord) 
    current_text = callback.message.text  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text_new = f"{text}"
    logging.info(text_new)
    logging.info(current_text)
    if current_text != f"{text}" or current_text =="–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å":
        await callback.message.edit_text(f" {text}", reply_markup=keybord)    
    await callback.answer()
    